{"./":{"url":"./","title":"About","keywords":"","body":"Ext4-学习笔记 From https://www.kernel.org/doc/html/latest/filesystems/ext4/overview.html This document attempts to describe the on-disk format for ext4 filesystems. The same general ideas should apply to ext2/3 filesystems as well, though they do not support all the features that ext4 supports, and the fields will be shorter. NOTE: This is a work in progress, based on notes that the author (djwong) made while picking apart a filesystem by hand. The data structure definitions should be current as of Linux 4.18 and e2fsprogs-1.44. All comments and corrections are welcome, since there is undoubtedly plenty of lore that might not be reflected in freshly created demonstration filesystems. 小鲨鱼            此页面修订于： 2019-08-24 11:48:33 "},"chap01/1-1.html":{"url":"chap01/1-1.html","title":"1-1","keywords":"","body":"2. 顶层设计 Ext4文件系统是由众多块组构成。为了减少由于碎片造成的性能困难，块分配器会非常努力地将每个文件的块保留在同一组中，从而减少寻道时间。块组的大小在 sb.s_blocks_per_group 中指定，也可以由 8 * block_size_in_bytes算出来。块大小默认为4KB，每个块组包含了32768 个块，所以大小为128MB。块组的数量可以由存储设备的大小除以当个块组大小得出来。ext4 中的所有字段都按小端写入磁盘，但是，jbd2（日志）中的所有字段都按大端写入磁盘。 2.1. 块 ext4 以\"块\"为单位分配存储空间。块是介于 1KiB 和 64KiB 之间的一组扇区，扇区数必须是 2 的指数倍。比块更大的单位是由块组成的块组。块大小在 mkfs 时指定，通常为 4KiB。如果块大小大于页的大小（比如在 只有 4KiB页大小的i386上创建 64KiB 大小的块），则可能会遇到安装问题。默认情况下，文件系统可以包含 2^32 个块。如果启用了\"64 位\"功能，则文件系统可以有 2^64 个块。 2.2. 块组的布局 标准的块组布局大致如下分布: 块组0的情况比较特殊，前1024个字节是保留字节以允许安装x86启动扇区和其他用途。超级块将以偏移量 1024 字节开始，通常为块0。但是，如果由于某种原因块大小等于1024字节，则超级块为块1。对于其他块组则没有偏移。 ext4驱动程序主要使用块组0中的超级块和组描述符。超级块和组描述符的冗余副本将写入磁盘上的某些块组，以防磁盘开头被破坏，尽管并非所有块组都必须承载冗余副本（有关详细信息，请参阅以下段落）。如果组没有冗余副本，则块组以data block bitmap开始。此外，当文件系统新格式化时，mkfs 将在块组描述符之后和块位映射开始之前分配\" reserve GDT block \"空间，以允许文件系统将来扩展。默认情况下，允许文件系统的大小比原始文件系统大小增加 1024 倍。 inode 表的位置由grp.bg_inode_table_*表示。拥有足够大的连续的块，足以包含 sb.s_inodes_per_group * sb.s_inode_size字节大小。 对于块组中各个项的排序，通常确定超级块和组描述符表（如果存在）将位于块组的开头。位图和 inode 表可以是任意位置，并且位图很有可能位于 inode 表之后，或者两者都位于不同的组中 （flex_bg）。剩余空间用于文件数据块、间接块映射、范围树块和扩展属性。 2.3. 可变块组 从 ext4 开始，有一个称为灵活块组 （flex_bg） 的新功能。在 flex_bg 中，多个块组作为一个逻辑块组绑定在一起; flex_bg 的第一个块组中的位图空间和 inode 表空间被展开，以包括 flex_bg 中所有其他块组的位图和 inode 表。例如，如果 flex_bg 大小为 4，则组 0 将包含（按顺序）超级块、组描述符、组 0-3 的数据块位图、组 0-3 的 inode 位图、组 0-3 的 inode 表，组 0 中的剩余空间用于文件数据。这样做的效果是将块元数据紧密地组合在一起以加快加载速度，并使大型文件能够在磁盘上连续运行。超级块和组描述符的备份副本始终位于块组的开头，即使启用了 flex_bg 也是如此。构成 flex_bg 的块组数等于2 ^ sb.s_log_groups_per_flex。 2.4. 元块组 如果没有选项 META_BG（在 ext3 中），为了安全性方面的考虑，所有的块描述符信息全部被保存到第一个块组中，因此以缺省的 128MB （227 B）大小的块组为例，最多能够支持 227 / 32 = 222 个块组，最大支持的文件系统大小为 222 * 227 = 249 B= 512 TB。而ext4_group_desc 目前的大小为 44 字节，以后会扩充到 64 字节，所能够支持的文件系统最大只有 256 TB。 为了解决这个问题，ext4 中采用了元块组（metablock group）的概念。所谓元块组就是指块组的集群，其组描述符结构可以存储在单个磁盘块中或在一个数据块中的一些连续块组。仍然以 128MB 的块组（数据块为 4KB）为例，ext4 中每个元块组可以包括 4096 / 64 = 64 个块组，即每个元块组的大小是 64 * 128 MB = 8 GB。 元块组功能将组描述符的位置从整个文件系统的拥塞的第一个块组移动到每个元块组本身的第一组。备份位于每个元块组的第二组和最后一组。这将 2^21 的最大块组限制增加到硬限制 2^32，从而允许支持 512PiB 文件系统。 采用元块组的概念之后，每个元块组中的块组描述符都变成定长的，这对于文件系统的扩展非常有利。采用元块组概念之后，如果需要扩充文件系统的大小，可以在现有数据块之后新添加磁盘数据块，并将这些数据块也按照元块组的方式进行管理即可，这样就可以突破文件系统大小原有的限制了。当然，为了使用这些新增加的空间，在 superblock 结构中需要增加一些字段来记录相关信息。（ext4_super_block 结构中增加了一个 s_first_meta_bg 字段用来引用第一个元块组的位置，这样还可以解决原有块组和新的元块组共存的问题。） ext3 与 ext4 磁盘布局对比: 2.5. 块组的懒初始化 ext4 的新功能是三个块组描述符标志，使 mkfs 能够跳过初始化块组元数据的其他部分。具体而言，INODE_UNINIT 和 BLOCK_UNINIT 标志意味着仅计算该组的 inode 和块位图，不会初始化磁盘位图块。对于空块组或仅包含固定位置块组元数据的块组，通常情况就是这种情况。INODE_ZEROED 标志表示 inode 表已初始化;mkfs 将取消设置此标志，并依靠内核在后台初始化 inode 表。 通过不将零写入位图和 inode 表，mkfs 时间大大减少。请注意，功能标志是 RO_COMPAT_GDT_CSUM，但dumpe2fs 输出将此打印为\"uninit_bg\"。它们是一回事。 2.6. 特殊的索引节点 ext4 为特殊功能保留一些 inode，如下所示： inode Number Purpose 0 Doesn't exist; there is no inode 0. 1 List of defective blocks. 2 Root directory. 3 User quota. 4 Group quota. 5 Boot loader. 6 Undelete directory. 7 Reserved group descriptors inode. (“resize inode”) 8 Journal inode. 9 The “exclude” inode, for snapshots(?) 10 Replica inode, used for some non-upstream feature? 11 Traditional first non-reserved inode. Usually this is the lost+found directory. See s_first_ino in the superblock. 2.7. 块和 Inode 分配策略 ext4认为比 ext3 要好，文件系统的好坏可以用本地化数据体现。在旋转磁盘上，将相关块彼此靠近可减少头执行器和磁盘访问数据块所必须执行的移动量，从而加快磁盘 IO。在 SSD 上，当然没有移动部件，但紧凑的数据可以增加每个传输请求的大小，同时减少请求的总数。还可能具有将写入集中到单个擦除块上的效果，这可显著加快文件重写速度。因此，尽可能减少碎片是很有用的。 ext4 用于消除碎片的第一个工具是多块分配器。首次创建文件时，块分配器会推测地将 8KiB 的磁盘空间分配给文件，前提是空间将很快写入。当文件关闭时，未使用的推测分配当然被释放，但如果推测是正确的（通常情况下，小文件的完整写入），然后文件数据在单个多块范围内写入。ext4 使用的第二个相关技巧是延迟分配。根据此方案，当文件需要更多的块来吸收文件写入时，文件系统会推迟决定磁盘上的确切位置，直到所有脏缓冲区都写入磁盘。通过绝对必要（调用提交超时或 sync（）或内核耗尽内存）之前不提交到特定位置，希望文件系统能够做出更好的位置决策。 ext4（和 ext3）使用的第三个技巧是，它尝试将文件的数据块保留在与其 inode 相同的块组中。当文件系统首先必须读取文件的 inode 以了解文件的数据块位于何处，然后查找到文件的数据块以开始 I/O 操作时，这减少了搜索带来的损耗。 第四个技巧是，在可行的情况下，目录中的所有 inode 都放置在与目录相同的块组中。此处的工作假设是目录中的所有文件可能都是相关的，因此尝试将它们放在一起非常有用。 第五个技巧是磁盘卷被切成 128MB 的块组;如上文所述，这些微型容器用于尝试维护数据本地化。但是，有一个故意的怪癖 - 当在根目录中创建目录时，inode 分配器将扫描块组，并将该目录放入它可以找到的负载最少的块组中。这鼓励目录分散在磁盘上;当顶级目录/二进制文件填满一个块组时，分配器只需移动到下一个块组。据称，这一方案将块组的加载均匀化，最坏的性能表现是那些非常倒霉的目录在旋转驱动器的末端。 当然，如果所有这些机制都失败了，人们总是可以使用e4defrag对文件进行碎片整理。 2.8. 校验值 从 2012 年初开始，元数据校验和添加到所有主要 ext4 和 jbd2 数据结构中。关联的功能标志是metadata_csum。在超级块中指示了所需的校验值算法，但截至 2012 年 10 月，唯一受支持的算法是 crc32c。某些数据结构没有空间来容纳完整的 32 位校验值，因此仅存储较低的 16 位。启用 64 位功能可增加数据结构大小，以便可以为许多数据结构存储完整的 32 位校验值。但是，现有的 32 位文件系统无法扩展以启用 64 位模式，至少实验性的resize2fs补丁可以来修复这一点。 现有文件系统可以通过运行`tune2fs -O metadata_csum来添加校验。如果 tune2fs 遇到没有足够的空白空间来添加校验和的目录块，它将请求您运行 e2fsck -D，以便使用校验和重新生成目录。这还有一个额外的好处，从目录文件中删除松弛空间并重新平衡 htree 索引。如果您 [忽略] 此步骤，您的目录将不受校验值的保护！ 下表描述了每种类型的校验值用到的数据元素。校验函数是超级块描述的内容（截至 2013 年 10 月的 crc32c），除非另有说明。 Metadata Length Ingredients Superblock __le32 The entire superblock up to the checksum field. The UUID lives inside the superblock. MMP __le32 UUID + the entire MMP block up to the checksum field. Extended Attributes __le32 UUID + the entire extended attribute block. The checksum field is set to zero. Directory Entries __le32 UUID + inode number + inode generation + the directory block up to the fake entry enclosing the checksum field. HTREE Nodes __le32 UUID + inode number + inode generation + all valid extents + HTREE tail. The checksum field is set to zero. Extents __le32 UUID + inode number + inode generation + the entire extent block up to the checksum field. Bitmaps le32 or le16 UUID + the entire bitmap. Checksums are stored in the group descriptor, and truncated if the group descriptor size is 32 bytes (i.e. ^64bit) Inodes __le32 UUID + inode number + inode generation + the entire inode. The checksum field is set to zero. Each inode has its own checksum. Group Descriptors __le16 If metadata_csum, then UUID + group number + the entire descriptor; else if gdt_csum, then crc16(UUID + group number + the entire descriptor). In all cases, only the lower 16 bits are stored. 2.9. Bigalloc //ignore. 2.10. 内联数据 内联数据功能旨在处理文件数据非常小以至于易于放入 inode 的情况，这（理论上）减少了磁盘块消耗并减少了寻盘。如果文件小于 60 字节，则数据存储在 inode.i_block 中内联存储。如果文件的其余部分适合扩展属性空间，则它可能在 inode 的（\"ibody EA\"）中的扩展属性\"system.data\"找到。当然这会限制可以附加到 inode 的扩展属性的数量。如果数据大小超过 i_block + ibody EA，则分配常规块并将内容移动到该块。 在更改以压缩用于存储内联数据的扩展属性键之前，应该能够将 160 字节的数据存储在 256 字节的 inode 中（截至 2015 年 6 月，i_extra_isize 为 28）。在此之前，由于 inode 空间的使用效率低下，限制为 156 字节。 内联数据功能需要存在\"system.data\"的扩展属性，即使属性值为零长度也是如此。 2.10.1. 内联目录 iblock 的前四个字节是父目录的 inode 编号。紧跟着的是条目数组的 56 字节空间;请参阅结构 ext4_dir条目。如果 inode 正文中有\"system.data\"属性，则 EA 值也是结构 ext4dir条目的数组。请注意，对于内联目录，i_block 和 EA 空间被视为单独的二分块;对于内联目录，i_block 和 EA 空间将被视为单独的 dirent 块。目录条目不能跨越这两个。内联目录条目不检查和，因为 inode 校验和应保护所有内联数据内容。 2.11. Large Extended Attribute Values //ignore 小鲨鱼            此页面修订于： 2019-08-24 11:48:33 "},"chap02/2-1.html":{"url":"chap02/2-1.html","title":"2-1","keywords":"","body":"全局结构体 文件系统被分片到多个块组中，每个块组在固定位置都有静态元数据。 3.1. Super Block 超级块记录有关封闭文件系统的各种信息，例如块计数、inode 计数、支持的功能、维护信息等。 如果设置了稀疏-超级功能标志，则超级块和组描述符的冗余副本仅保留在组号为 0 或2的3、5 或 7次方的组中。如果未设置标志，则冗余副本将保留在所有组中。 超级块校验值由超级块结构中的FS UUID计算得出。 ext4的超级块在结构ext4_super_block中描述如下： //TODO 3.2. Block Group Descriptors 文件系统上的 ach 块组具有与其关联的这些描述符之一。如上面的\"布局\"部分所述，组描述符（如果存在）是块组中的第二项。标准配置是每个块组包含块组描述符表的完整副本，除非设置了稀疏_超级功能标志。 请注意组描述符如何记录位图和 inode 表的位置（即它们可以浮动）。这意味着在块组中，具有固定位置的唯一数据结构是超级块和组描述符表。flex_bg 机制使用此属性将多个块组分组到一个 flex 组中，并将所有组的位图和 inode 表布局到 flex 组的第一组中的一个长期运行中。 如果设置了 meta_bg 功能标志，则多个块组将分组到一个元组中。但是，请注意，在 meta_bg 情况下，较大的元组中的第一个和最后两个块组仅包含元组内的组的组描述符。 flex_bg 和 meta_bg 似乎不是相互排斥的功能。 在 ext2、ext3 和 ext4（未启用 64 位功能时）中，块组描述符只有 32 个字节长，因此以 bg_check和结束。在启用了 64 位功能的 ext4 文件系统上，块组描述符将扩展到至少下述的 64 字节;大小存储在超级块中。 如果设置了 gdt_csum 且未设置元数据_csum，则块组校验和是 FS UUID 的 crc16、组编号和组描述符结构。如果设置了 metadata_csum，则块组校验和是 FS UUID、组编号和组描述符结构的校验和的下 16 位。块和 inode 位图校验和都是根据 FS UUID、组编号和整个位图计算的。 3.3. Block and inode Bitmaps 数据块位图跟踪数据块组中数据块的使用情况。 inode 位图记录 inode 表中正在使用的条目。 与大多数位图一样，一个位表示一个数据块或 inode 表条目的使用状态。这意味着块组大小为 8 = 字节数_in_logic_block。 注： 如果为给定的块组设置了 BLOCK_UNINIT，则内核和 e2fsprogs 代码的各个部分将假装块位图包含零（即组中的所有块都是免费的）。但是，不一定是没有正在使用的块 -- 如果设置了 meta_bg，则位图和组描述符就位于组中。遗憾的是，ext2fs_test_block_bitmap2（） 将为这些位置返回\"0\"，这会产生令人困惑的调试器输出。 3.4. Inode Table Inode 表在 mkfs 时间静态分配。每个块组描述符指向表的开头，超级块记录每个组的 inode 数。有关详细信息，请参阅 inode 上的部分。 3.5. Multiple Mount Protection 多装载保护 （MMP） 是保护文件系统免受多个主机同时使用的功能。打开文件系统（用于安装或 fsck 等）时，在节点上运行的 MMP 代码（调用节点 A）将检查序列号。如果序列号为 EXT4_MMP_SEQ_CLEAN，则打开将继续。如果序列号为 EXT4_MMP_SEQ_FSCK，则 fsck 正在（希望）运行，打开将立即失败。否则，打开的代码将等待指定 MMP 检查间隔的两倍，并再次检查序列号。如果序列号已更改，则文件系统在另一台计算机上处于活动状态，并且打开失败。如果 MMP 代码通过所有这些检查，将生成一个新的 MMP 序列号并将其写入 MMP 块，并且装载将继续。 当文件系统是实时的时，内核设置一个计时器，以在指定的 MMP 检查间隔重新检查 MMP 块。要执行重新检查，将重新读取 MMP 序列号;如果重读 MMP 序列号，请重新读取 MMP 序列号。如果它与内存中的 MMP 序列号不匹配，则另一个节点（节点 B）已装载文件系统，节点 A 重新装载文件系统只读。如果序列号匹配，则序列号在内存和磁盘上都递增，并且重新检查完成。 每当打开操作成功时，主机名和设备文件名都会写入 MMP 块。MMP 代码不使用这些值;它们完全出于参考目的。 小鲨鱼            此页面修订于： 2019-08-24 11:48:33 "}}